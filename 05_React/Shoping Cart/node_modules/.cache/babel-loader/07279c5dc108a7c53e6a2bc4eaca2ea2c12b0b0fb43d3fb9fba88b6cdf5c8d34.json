{"ast":null,"code":"import { useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nvar useSyncExternalStoreWithSelector = notInitialized;\nexport var initializeUseSelector = function initializeUseSelector(fn) {\n  useSyncExternalStoreWithSelector = fn;\n};\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\nexport function createSelectorHook() {\n  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector) {\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(\"You must pass a selector to useSelector\");\n      }\n      if (typeof selector !== 'function') {\n        throw new Error(\"You must pass a function as a selector to useSelector\");\n      }\n      if (typeof equalityFn !== 'function') {\n        throw new Error(\"You must pass a function as an equality function to useSelector\");\n      }\n    }\n    var _useReduxContext = useReduxContext(),\n      store = _useReduxContext.store,\n      subscription = _useReduxContext.subscription,\n      getServerState = _useReduxContext.getServerState;\n    var selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, selector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport var useSelector = /*#__PURE__*/createSelectorHook();","map":{"version":3,"names":["useContext","useDebugValue","useReduxContext","useDefaultReduxContext","ReactReduxContext","notInitialized","useSyncExternalStoreWithSelector","initializeUseSelector","fn","refEquality","a","b","createSelectorHook","context","arguments","length","undefined","useSelector","selector","equalityFn","process","env","NODE_ENV","Error","_useReduxContext","store","subscription","getServerState","selectedState","addNestedSub","getState"],"sources":["C:/Users/aashi/Desktop/Shoping Cart/node_modules/react-redux/es/hooks/useSelector.js"],"sourcesContent":["import { useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context = ReactReduxContext) {\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : () => useContext(context);\n  return function useSelector(selector, equalityFn = refEquality) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState\n    } = useReduxContext();\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, selector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();"],"mappings":"AAAA,SAASA,UAAU,EAAEC,aAAa,QAAQ,OAAO;AACjD,SAASC,eAAe,IAAIC,sBAAsB,QAAQ,mBAAmB;AAC7E,SAASC,iBAAiB,QAAQ,uBAAuB;AACzD,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,IAAIC,gCAAgC,GAAGD,cAAc;AACrD,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAGC,EAAE,EAAI;EACzCF,gCAAgC,GAAGE,EAAE;AACvC,CAAC;AAED,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,CAAC,EAAEC,CAAC;EAAA,OAAKD,CAAC,KAAKC,CAAC;AAAA;AACrC;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASC,kBAAkBA,CAAA,EAA8B;EAAA,IAA7BC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,iBAAiB;EAC5D,IAAMF,eAAe,GAAGW,OAAO,KAAKT,iBAAiB,GAAGD,sBAAsB,GAAG;IAAA,OAAMH,UAAU,CAACa,OAAO,CAAC;EAAA;EAC1G,OAAO,SAASI,WAAWA,CAACC,QAAQ,EAA4B;IAAA,IAA1BC,UAAU,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,WAAW;IAC5D,IAAIW,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAI,CAACJ,QAAQ,EAAE;QACb,MAAM,IAAIK,KAAK,2CAA2C;MAC5D;MAEA,IAAI,OAAOL,QAAQ,KAAK,UAAU,EAAE;QAClC,MAAM,IAAIK,KAAK,yDAAyD;MAC1E;MAEA,IAAI,OAAOJ,UAAU,KAAK,UAAU,EAAE;QACpC,MAAM,IAAII,KAAK,mEAAmE;MACpF;IACF;IAEA,IAAAC,gBAAA,GAIItB,eAAe,EAAE;MAHnBuB,KAAK,GAAAD,gBAAA,CAALC,KAAK;MACLC,YAAY,GAAAF,gBAAA,CAAZE,YAAY;MACZC,cAAc,GAAAH,gBAAA,CAAdG,cAAc;IAEhB,IAAMC,aAAa,GAAGtB,gCAAgC,CAACoB,YAAY,CAACG,YAAY,EAAEJ,KAAK,CAACK,QAAQ,EAAEH,cAAc,IAAIF,KAAK,CAACK,QAAQ,EAAEZ,QAAQ,EAAEC,UAAU,CAAC;IACzJlB,aAAa,CAAC2B,aAAa,CAAC;IAC5B,OAAOA,aAAa;EACtB,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMX,WAAW,GAAG,aAAaL,kBAAkB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}